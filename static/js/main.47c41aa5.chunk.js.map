{"version":3,"sources":["AppShell.js","components/Home.js","components/Users.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["AppShell","children","useState","open","setOpen","handleOpenToggle","useCallback","handleLinkClick","theme","createMuiTheme","CssBaseline","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Drawer","onClose","MenuItem","to","id","React","cloneElement","Home","Card","CardHeader","title","CardContent","Users","users","setUsers","useEffect","firebase","firestore","collection","get","then","docs","map","doc","data","catch","err","console","log","name","key","Notification","App","className","exact","path","component","Boolean","window","location","hostname","match","require","config","app","error","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sVAkCeA,EA5BE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACTC,oBAAS,GADA,mBAC1BC,EAD0B,KACpBC,EADoB,KAG3BC,EAAmBC,uBAAY,kBAAMF,GAAQ,SAAAD,GAAI,OAAKA,OAAO,IAC7DI,EAAkBD,uBAAY,kBAAMF,GAAQ,KAAQ,IAE1D,OACE,kBAAC,IAAD,CAAkBI,MAAOC,eACvB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,OAAOC,QAASb,GAClE,kBAAC,IAAD,SAIN,kBAACc,EAAA,EAAD,CAAQhB,KAAMA,EAAMiB,QAASb,GAC3B,kBAACc,EAAA,EAAD,CAAUpB,SAAU,kBAAC,IAAD,CAAMqB,GAAG,IAAIrB,SAAS,SAAWiB,QAASX,IAC9D,kBAACc,EAAA,EAAD,CAAUpB,SAAU,kBAAC,IAAD,CAAMqB,GAAG,SAASrB,SAAS,UAAYiB,QAASX,IACpE,kBAACc,EAAA,EAAD,CAAUpB,SAAU,kBAAC,IAAD,CAAMqB,GAAG,gBAAgBrB,SAAS,iBAAmBiB,QAASX,KAEpF,6BACE,yBAAKgB,GAAG,WAAWC,IAAMC,aAAaxB,O,mCCZ/ByB,EAbF,WACX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAClB,kBAACC,EAAA,EAAD,KACE,4BACE,+D,yBCsBKC,EA3BD,WAAO,IAAD,EACQ7B,mBAAS,MADjB,mBACX8B,EADW,KACJC,EADI,KAclB,OAXAC,qBAAU,WACM,OAAVF,GACSG,IAASC,YACAC,WAAW,SAASC,MAErCC,MAAK,SAAAF,GAAU,OAAIA,EAAWG,KAAKC,KAAI,SAAAC,GAAG,oBAAOnB,GAAImB,EAAInB,IAAOmB,EAAIC,cACpEJ,KAAKN,GACLW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAAMZ,EAAS,OAE5C,CAACD,IAEa,OAAVA,EACL,iBAEA,6BACGA,EAAMS,KAAI,gBAAGlB,EAAH,EAAGA,GAAIyB,EAAP,EAAOA,KAAP,OACT,kBAACrB,EAAA,EAAD,CAAMsB,IAAK1B,GACT,kBAACK,EAAA,EAAD,CAAYC,MAAOmB,UClBdE,EAJM,WACnB,OAAO,8CCmBMC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAUC,UAAU,OAClB,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,SAASC,UAAWxB,IACtC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,gBAAgBC,UAAWL,QCHnCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,EAAQ,IAAUC,SAalB,IACE3B,IAAS4B,MACT,MAAOC,GACP7B,IAAS8B,cAdY,CACrBC,OAAQC,0CACRC,WAAYD,6BACZE,YAAaF,oCACbG,UAAWH,aACXI,cAAeJ,yBACfK,kBAAmBL,eACnBM,MAAON,wCAUTO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAoB,GACLlB,QAAQkB,MAAMA,EAAMoB,c","file":"static/js/main.47c41aa5.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Toolbar, IconButton, Drawer, AppBar, CssBaseline, MenuItem } from '@material-ui/core';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from 'react-router-dom';\n\nconst AppShell = ({ children }) => {\n  const [open, setOpen] = useState(false);\n\n  const handleOpenToggle = useCallback(() => setOpen(open => !open), []);\n  const handleLinkClick = useCallback(() => setOpen(false), []);\n\n  return (\n    <MuiThemeProvider theme={createMuiTheme()}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleOpenToggle}>\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer open={open} onClose={handleLinkClick}>\n        <MenuItem children={<Link to=\"/\" children=\"Home\" />} onClick={handleLinkClick} />\n        <MenuItem children={<Link to=\"/users\" children=\"Users\" />} onClick={handleLinkClick} />\n        <MenuItem children={<Link to=\"/notification\" children=\"Notification\" />} onClick={handleLinkClick} />\n      </Drawer>\n      <div>\n        <div id=\"content\">{React.cloneElement(children)}</div>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nexport default AppShell;\n","import React from 'react';\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\n\nconst Home = () => {\n  return (\n    <Card>\n      <CardHeader title=\"hello world\" />\n      <CardContent>\n        <ul>\n          <li>Web Manifest for installing</li>\n        </ul>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport { Card, CardHeader } from '@material-ui/core';\n\nconst Users = () => {\n  const [users, setUsers] = useState(null);\n\n  useEffect(() => {\n    if (users === null) {\n      const db = firebase.firestore();\n      const snapshot = db.collection('users').get();\n      snapshot\n        .then(collection => collection.docs.map(doc => ({ id: doc.id, ...doc.data() })))\n        .then(setUsers)\n        .catch(err => console.log(err), setUsers([]));\n    }\n  }, [users]);\n\n  return users === null ? (\n    '... is loading'\n  ) : (\n    <div>\n      {users.map(({ id, name }) => (\n        <Card key={id}>\n          <CardHeader title={name} />\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport default Users;\n","import React from 'react';\n\nconst Notification = () => {\n  return <div>Notification</div>;\n};\n\nexport default Notification;\n","import React from 'react';\nimport './App.scss';\nimport AppShell from './AppShell';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Users from './components/Users';\nimport Notification from './components/Notification';\n\nfunction App() {\n  return (\n    <Router>\n      <AppShell className=\"App\">\n        <div>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/users\" component={Users} />\n          <Route exact path=\"/notification\" component={Notification} />\n        </div>\n      </AppShell>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nrequire('dotenv').config();\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\n// Initialize Firebase\ntry {\n  firebase.app();\n} catch (error) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}